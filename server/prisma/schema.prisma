// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                 @id @default(uuid())
  email            String                 @unique
  password         String
  firstName        String
  lastName         String
  phoneNumber      String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  bandMemberships  BandMember[]
  createdBands     Band[]                 @relation("BandCreator")
  createdRehearsals Rehearsal[]           @relation("RehearsalCreator")
  attendance       Attendance[]
  availability     Availability[]
  availabilityExceptions AvailabilityException[]
  notifications    Notification[]
  messages         Message[]
  files            File[]
}

model Band {
  id               String                 @id @default(uuid())
  name             String
  description      String?
  createdBy        User                   @relation("BandCreator", fields: [createdById], references: [id])
  createdById      String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  members          BandMember[]
  rehearsals       Rehearsal[]
  availability     Availability[]
}

model BandMember {
  id               String                 @id @default(uuid())
  band             Band                   @relation(fields: [bandId], references: [id])
  bandId           String
  user             User                   @relation(fields: [userId], references: [id])
  userId           String
  role             BandRole               @default(MEMBER)
  joinDate         DateTime               @default(now())
  status           MembershipStatus       @default(PENDING)

  @@unique([bandId, userId])
}

model Rehearsal {
  id               String                 @id @default(uuid())
  band             Band                   @relation(fields: [bandId], references: [id])
  bandId           String
  title            String
  description      String?
  location         String?
  startTime        DateTime
  endTime          DateTime
  isRecurring      Boolean                @default(false)
  recurrencePattern Json?                 // Store recurrence rule as JSON
  createdBy        User                   @relation("RehearsalCreator", fields: [createdById], references: [id])
  createdById      String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  attendance       Attendance[]
  notifications    Notification[]
  messages         Message[]
  files            File[]
}

model Attendance {
  id               String                 @id @default(uuid())
  rehearsal        Rehearsal              @relation(fields: [rehearsalId], references: [id])
  rehearsalId      String
  user             User                   @relation(fields: [userId], references: [id])
  userId           String
  status           AttendanceStatus       @default(NO_RESPONSE)
  responseTime     DateTime?
  attended         Boolean?               // Marked after rehearsal

  @@unique([rehearsalId, userId])
}

model Availability {
  id               String                 @id @default(uuid())
  user             User                   @relation(fields: [userId], references: [id])
  userId           String
  band             Band                   @relation(fields: [bandId], references: [id])
  bandId           String
  dayOfWeek        Int                    // 0-6 for Sunday-Saturday
  startTime        String                 // Store as HH:MM format
  endTime          String                 // Store as HH:MM format
  isRecurring      Boolean                @default(true)

  @@unique([userId, bandId, dayOfWeek])
}

model AvailabilityException {
  id               String                 @id @default(uuid())
  user             User                   @relation(fields: [userId], references: [id])
  userId           String
  date             DateTime
  isAvailable      Boolean
  startTime        String?                // Store as HH:MM format
  endTime          String?                // Store as HH:MM format
  note             String?

  @@unique([userId, date])
}

model Notification {
  id               String                 @id @default(uuid())
  user             User                   @relation(fields: [userId], references: [id])
  userId           String
  rehearsal        Rehearsal              @relation(fields: [rehearsalId], references: [id])
  rehearsalId      String
  type             NotificationType
  status           NotificationStatus     @default(PENDING)
  scheduledFor     DateTime
  sentAt           DateTime?
}

model Message {
  id               String                 @id @default(uuid())
  rehearsal        Rehearsal              @relation(fields: [rehearsalId], references: [id])
  rehearsalId      String
  user             User                   @relation(fields: [userId], references: [id])
  userId           String
  content          String
  createdAt        DateTime               @default(now())
}

model File {
  id               String                 @id @default(uuid())
  rehearsal        Rehearsal              @relation(fields: [rehearsalId], references: [id])
  rehearsalId      String
  user             User                   @relation(fields: [userId], references: [id])
  userId           String
  fileName         String
  fileType         String
  fileSize         Int
  s3Key            String                 // AWS S3 key
  uploadedAt       DateTime               @default(now())
}

enum BandRole {
  ADMIN
  MEMBER
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum AttendanceStatus {
  ATTENDING
  NOT_ATTENDING
  MAYBE
  NO_RESPONSE
}

enum NotificationType {
  CREATED
  UPDATED
  REMINDER
  CANCELLED
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}
